配置：
    git config --global user.name "用户名"
    git config --global user.email "电子邮件地址"

使用git：
     git status  判断该项目是否被git管理
        fatal: not a git repository (or any of the parent directories): .git

    git init  初始化仓库
        initialized empty Git repository in  文件地址
    刚添加到项目中的文件属于未跟踪状态
        状态 由未跟踪 -->  暂存
            git add <文件名>
            git add * 将所有已修改（未跟踪的文件暂存）
        暂存 ---> 未修改
        git commit -a -m "xxxx" 提交所有已修改的文件（未跟踪的文件不会提交）
        git commit -m "xxxxx" 将暂存的文件存储到仓库中
       未修改-->修改 
            修改代码后，代码会变为修改状态

常用命令：
    
    恢复到上一次提交 （文件已修改未暂存）
    git restore <文件名>
    git restore  --staged <文件名>  取消暂存状态

    删除文件
    git rm <文件名>
    git rm <文件名> -f  强制删除

    移动文件
        git mv from  to  移动文件 重命名文件


分支
    git 在存储文件时，每一次代码提交都会创建一个与之对应的节点，git就是通过一个个节点来记录代码的状态的，
    节点会构成一个树状结构，树状结构就一位置这个树会存在分支，默认情况下仓库只有一个分支，命名为master.
    在使用git时，可以创建多个分支，分支与分支之间相互独立，在一个分支上修改代码不会影响其他分支


    git branch  查看当前分支
    git branch <branch name> 创建分支
    git branch -d <branch name> 删除分支
    git switch <branch name> 切换分支
    git switch -c <branch name> 创建并切换分支


    在开发中，都是在自己的分支上编写代码，代码编写完成后，在将自己的代码合并到主分支中
    合并分支
    git merge <分支名>   合并分支

    变基(rebase)
    在开发中除了通过merge来合并分支，还可以通过变基来完成分支的合并

    我们通过merge合并分支时，在提交记录中会将所有的分支创建和分支合并的过程全部都显示出来，这样当项目比较复杂，开发过程比较波折时，我必须要反复的
    创建、合并、删除分支。这样一来将会使得我们代码的提交记录变得极为混乱
    原理(变基时发生了什么)：
        1 当我们发起变基时，git会首先找到两条分支的最近的共同祖先
        2 对比当前分支相对于祖先的历史提交，并将其不同提取出来，存储到一个临时文件中
        3 将当前部分指向目标基底
        4 已当前基底开始，重新执行历史操作
     变基和merge对于合并分支来说最终的结果是一样的！ 但是变基会使得代码的提交记录更整洁更清晰  
     注意！ 大部分情况下合并和变基是可以互换的，但是如果分支已经提交给了远程仓库，这时尽量不要使用变基

    远程仓库(remote)

    由于之前都是在本地操作， 开发中并不如此，这时我们就需要一个远程的git仓库
    但本质没什么区别，不同点在于远程仓库可以被多人同时访问使用，方便我们协同开发。
    在实际工作中，git的服务器通常由公司搭建内部使用或是购买一些公共的私有git服务器。
    学习阶段，直接使用一些开放的公共git仓库。目前我们常用的库由两个 Github gitee

    将本地库上传git:
        git remote add origin https://github.com/xxxx/xxxx.git
            git remote add <remote name> <url> 
        git branch -M main
        修改分支的名称为main 
        git push -u origin main
        git push 将代码上传至服务器


        将本地库上传至gitee
        git remote add gitee https://gitee.com/pan-pengfei/git.git
        git push -u gitee main


    远程库操作命令
        git remote 
            显示当前连接的所有远程库
        git remote add <远程库名> <url>
            关联远程仓库
        git remote remove <远程库名>
            删除远程库
        git push -u <远程库名> <分支名>
            向远程库推送代码，并和当前分支关联
        git clone <url>
            从远程库下载代码
        
        git push  如果本地的版本低于远程库，push默认推不上去 
        git fetch 要想推送成功 必须确保本地库和远程库的版本一致 fetch它会从远程下载所有代码，但它不会将代码和当前分支自动合并
                  使用fetch 拉取代码后，必须手动对代码进行合并

        git pull 从服务器上拉取代码自动合并

        git push <远程库> <本地分支>:<远程分支>

        注意：推送代码之前，一定要先从远程库拉取最新的代码

        tag 标签
            当头指针没有指向某个分支的头部时，这种状态我们称为分离头指针（HEAD delached），分离头指针的状态下也可以操作代码，
            但是这些操作不会出现在任何的分支上，所以注意不在在分离头指针的状态下来操作仓库

            如果一定需要回到以前的节点对代码进行操作，可以对需要操作的节点创建分支，对新分支进行操作
            
            可以为提交记录设置标签，设置标签以后，可以通过边钱快速的识别出不同的开发节点

            git tag 
                查看标签
            git tag  <xxx>
                为当前状态打上 xxx 标签
            git tag <xxxx> commit.id 
                为commit.id  打上xxxx 标签
            git push <远程仓库名> <标签名>
                将该标签提交到远程仓库
            git push <远程仓库名> --tags
                将所有标签提交到远程仓库
            git tag -d 标签名
                删除标签
            git push <远程仓库名> --delete 标签名 
                删除远程标签


        
        git log 
            提交记录
        git switch  commit.id --detach
            将头指针指向该id 并且只能看到当前id所拥有的代码
        git switch -c <分支名> commit.id
            使头指针指向该id所在位置，并且创建新分支对其进行相关操作
        
